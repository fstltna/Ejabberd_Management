#!/usr/bin/perl
use strict;
use warnings;

use UI::Dialog;
use Term::ReadKey;
use Term::ANSIScreen qw(cls);
use Proc::ProcessTable;
use POSIX qw(strftime);
use Number::Bytes::Human qw(format_bytes parse_bytes);

# Commands
my $FileEditor = "/bin/nano";
my $InitDName = "/opt/ejabberd-24.12/bin/ejabberdctl";
my $EJCONF = "/opt/ejabberd/conf";
my $BackupCommand = "/root/ejabberd-backup/ejabberdbackup.pl -snapshot";
my $PagerCommand = "/usr/bin/less";
my $UpdateCommand = "/usr/bin/git pull";
my $EJMCDir = "/root/HotlineManagement";
#my $DownloadEmail = "$EJMCDir/DownloadedFiles";
my $BackupToolDir = "/root/ejabberd-backup";
#my $StartupDir = "/root/HotlineStartup";

my $DEBUG_MODE = "off";

# Data Files
my $AgreementTXT = "$EJCONF/ejabberdctl.cfg";
my $ConfigYaml = "$EJCONF/ejabberd.yml";
my $MessageBoardTXT = "$EJCONF/MessageBoard.txt";

###################################################
# No changes below here
###################################################

my $MySettings = "$ENV{'HOME'}/.ejmcrc";

my $EJMC_ver = "1.0";
my $Record = "false";	# Are results saved?
my $TempDir = "/tmp";
my $RobotName = "";
my $BotVersion = "";
my $UserName = "";
my $ServerStatus = "foo";

sub PrintDebugCommand
{
        if ($DEBUG_MODE eq "off")
        {
                return;
        }
        my $PassedString = shift;
        print "About to run:\n$PassedString\n";
        print "Press Enter To Run This:";
        my $entered = <STDIN>;
}

my $d = new UI::Dialog ( backtitle => "eJabberd Management Console v$EJMC_ver", height => 20, width => 65, listheight => 5,
	order => [ 'ascii', 'cdialog', 'xdialog' ]);

my $windowtitle = "Welcome to the eJabberd Management Console!";
my $enjoyedtitle = "We hope you enjoyed EJMC!";
my $introtext =
"This is the eJabberd Management Console, a utility for eJabberd operators
to manage their servers from a text UI rather than the command line.";

$d->msgbox( title => $windowtitle, text => $introtext );

if (($d->state() eq "ESC") || ($d->state() eq "CANCEL"))
{
	exit 0;
}

# Check for config file
if (-f $MySettings)
{
	# Read in settings
	open (my $FH, "<", $MySettings) or die "Could not read default file '$MySettings' $!";
	while (<$FH>)
	{
		chop();
		my ($Command, $Setting) = split(/=/, $_);
		if ($Command eq "fileeditor")
		{
			$FileEditor = $Setting;
		}
		if ($Command eq "initdname")
		{
			$InitDName = $Setting;
		}
		if ($Command eq "ejconfdir")
		{
			$EJCONF = $Setting;
		}
		if ($Command eq "backupcommand")
		{
			$BackupCommand = $Setting;
		}
		if ($Command eq "pagercommand")
		{
			$PagerCommand = $Setting;
		}
		if ($Command eq "agreementtxt")
		{
			$AgreementTXT = $Setting;
		}
		if ($Command eq "messageboardtxt")
		{
			$MessageBoardTXT = $Setting;
		}
		if ($Command eq "configyaml")
		{
			$ConfigYaml = $Setting;
		}
	}
	close($FH);
}
else
{
	# Store defaults
	open (my $FH, ">", $MySettings) or die "Could not create default file '$MySettings' $!";
	print $FH "fileeditor=/bin/nano\n";
	print $FH "initdname=/opt/ejabberd-24.12/bin/ejabberdctl\n";
	print $FH "ejconfdir=/opt/ejabberd/conf\n";
	print $FH "backupcommand=/root/ejabberd-backup/ejabberdbackup.pl -snapshot\n";
	print $FH "pagercommand=/usr/bin/less\n";
	print $FH "configyaml=$EJCONF/ejabberd.yml\n";
	print $FH "agreementtxt=$EJCONF/ejabberdctl.cfg\n";
	print $FH "messageboardtxt=$EJCONF/MessageBoard.txt\n";
	close($FH);
}

my $menuselection = "";

sub CheckServerStatus
{
	my $running=`ps ax|grep ejabberdctl|grep -v grep`;
	if ($running ne "")
	{
		$ServerStatus = "Running";
	}
	else
	{
		$ServerStatus = "Stopped";
	}

}

sub UpdateToolsMenu
{
        my $WantRespawn="ON";
        CheckServerStatus();
        if (-f "$EJCONF/nostart")
        {
                $WantRespawn="OFF";
        }
        $menuselection = $d->menu( title => "Update Tools Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Update EJMC',
                                      '2', 'Update Backup',
				      #'3', 'Update Startup',
                                      'q', 'Main Menu' ] );
}

sub DoUpdate
{
        my $DesiredDir = $_[0];

        # Update desired utility
        chdir ($DesiredDir);
        PrintDebugCommand("Running $UpdateCommand in $DesiredDir\n");
        system("$UpdateCommand");
        print "Press Enter To Continue";
        my $entered = <STDIN>;
}

sub UpdateTools
{
        while (-1)
        {
                UpdateToolsMenu();
                if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
                {
                        return;
                }
                elsif ($menuselection eq "1")
                {
                        # Update HMC
                        DoUpdate($EJMCDir);
                }
                elsif ($menuselection eq "2")
                {
                        # Update BackupToolDir
                        DoUpdate($BackupToolDir);
                }
		#elsif ($menuselection eq "3")
		#{
		#        # Update Startup
		#        DoUpdate($StartupDir);
		#}
        }
}

sub MainMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$EJCONF/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Main Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Start Server',
                                      '2', 'Stop Server',
                                      '3', 'Server Console',
                                      '4', 'Edit ejabberd.yml',
                                      '5', 'Edit ejabberdctl.cfg',
                                      '6', 'Run Backup',
                                      '7', 'Edit Settings',
                                      '8', 'Restart eJabberd',
                                      '9', 'Update Tools',
                                      'q', 'Quit EJMC' ] );
}

while (-1)
{
	MainMenu();
	if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
	{
		$d->msgbox( title => $enjoyedtitle, text => "Thanks for using EJMC..." );
		exit 0;
	}
	if ($menuselection eq "1")
	{
		system("$InitDName start");
	}
	elsif ($menuselection eq "2")
	{
		if ($d->yesno( text => "Confirm stopping the server", text => "Are you sure you want to stop the server?" ))
		{
			system("$InitDName stop");
			sleep(5);
			#			system("killall mobius-hotline-server");
		}
	}
	elsif ($menuselection eq "3")
	{
		$d->msgbox( text => "To exit the eJabberd console and return to EJMC press CTRL-G q" );
		system("screen -r eJabberd");
	}
	#	elsif ($menuselection eq "4")
	#	{
	#		# Turn off respawn
	#		system("touch $EJCONF/nostart");
	#	}
	#	elsif ($menuselection eq "5")
	#	{
	#		# Turn respawn back on
	#		if (-f "$EJCONF/nostart")
	#		{
	#			unlink("$EJCONF/nostart");
	#		}
	#	}
	elsif ($menuselection eq "4")
	{
		# Edit Server config file
		system("$FileEditor $ConfigYaml");
	}
	elsif ($menuselection eq "5")
	{
		# Edit ejabberdctl.cfg
		system("$FileEditor $AgreementTXT");
	}
	elsif ($menuselection eq "6")
	{
		# Run a backup
		system("clear");
		system("$BackupCommand");
		print "Press Enter To Continue";
		my $entered = <STDIN>;
	}
	elsif ($menuselection eq "7")
	{
		# Run the download settings email
		system("$FileEditor $MySettings");
	}
	elsif ($menuselection eq "8")
	{
		# Reset server process
		print "Restartintg the Server Process\n";
                system("$InitDName restart");
		sleep(5);
	}
	elsif ($menuselection eq "9")
	{
		# Update tools menu
		UpdateTools();
	}
}

exit 0;
